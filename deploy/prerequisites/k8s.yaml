#  Priority classes 
# 1 default priority class for demo system services
# 6 classes with higher, medium, lower priorities for windows and linux. 
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: demo-system-highest-priority-linux
value: 10000000
globalDefault: true
description: "This priority class is used for highest priority demo system services which are essential."

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: demo-highest-priority-linux
value: 1000000
globalDefault: false
description: "This priority class should be used for highest priority demo service pods (linux) only."

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: demo-medium-priority-linux
value: 100000
globalDefault: false
description: "This priority class should be used for medium priority demo service pods (linux) only. Will be default priority for pods with no priority class set."

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: demo-lowest-priority-linux
value: 10000
globalDefault: false
description: "This priority class should be used for lowest priority demo service pods (linux) only."

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: demo-highest-priority-win
value: 1000000
globalDefault: false
description: "This priority class should be used for highest priority demo service pods (windows) only."

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: demo-medium-priority-win
value: 100000
globalDefault: false
description: "This priority class should be used for medium priority demo service pods (windows) only."

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: demo-lowest-priority-win
value: 10000
globalDefault: false
description: "This priority class should be used for lowest priority demo service pods (windows) only."

# Resource quota allocation for each priority class
# Change based on cluster capacity and needs
# Not required to define all priority classes here for CrashLoopBackOff Cleaner app.. just done for demo purpose
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-system-highest-priority-linux
  namespace: demo
spec:
  hard:
    requests.cpu: "3"
    limits.memory: 4Gi
  scopeSelector:
    matchExpressions:
    - operator : In
      scopeName: PriorityClass
      values: ["demo-system-highest-priority-linux"]

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-highest-priority-linux
  namespace: demo
spec:
  hard:
    requests.cpu: "4"
    limits.memory: 20Gi
  scopeSelector:
    matchExpressions:
    - operator : In
      scopeName: PriorityClass
      values: ["demo-highest-priority-linux"]


---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-medium-priority-linux
  namespace: demo
spec:
  hard:
    requests.cpu: "5"
    limits.memory: 20Gi
  scopeSelector:
    matchExpressions:
    - operator : In
      scopeName: PriorityClass
      values: ["demo-medium-priority-linux"]

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-lowest-priority-linux
  namespace: demo
spec:
  hard:
    requests.cpu: "3"
    limits.memory: 140Gi
  scopeSelector:
    matchExpressions:
    - operator : In
      scopeName: PriorityClass
      values: ["demo-lowest-priority-linux"]

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-highest-priority-win
  namespace: demo
spec:
  hard:
    requests.cpu: "20"
    limits.memory: 80Gi
  scopeSelector:
    matchExpressions:
    - operator : In
      scopeName: PriorityClass
      values: ["demo-highest-priority-win"]

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-medium-priority-win
  namespace: demo
spec:
  hard:
    requests.cpu: "30"
    limits.memory: 150Gi
  scopeSelector:
    matchExpressions:
    - operator : In
      scopeName: PriorityClass
      values: ["demo-medium-priority-win"]

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: demo-lowest-priority-win
  namespace: demo
spec:
  hard:
    requests.cpu: "20"
    limits.memory: 80Gi
  scopeSelector:
    matchExpressions:
    - operator : In
      scopeName: PriorityClass
      values: ["demo-lowest-priority-win"]

# HPA for each app
# HPA should be defined outside of app deployment pipelines at prerequisite or with infra deployment
# This is required in order to prevent desired pods from resetting to minimum pods if HPA deployed with app deployment
---
# HPA for crashloopbackoff-cleaner
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: crashloopbackoff-cleaner-hpa
  namespace: demo
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: crashloopbackoff-cleaner
  maxReplicas: 3
  minReplicas: 1
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 15
      policies:
      - type: Percent
        value: 60
        periodSeconds: 30
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70